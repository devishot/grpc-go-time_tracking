// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	TimeRecord
	TimeRecords
	DeleteRecordRequest
	AllRecordsRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TimeRecord struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *TimeRecord) Reset()                    { *m = TimeRecord{} }
func (m *TimeRecord) String() string            { return proto.CompactTextString(m) }
func (*TimeRecord) ProtoMessage()               {}
func (*TimeRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TimeRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TimeRecord) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TimeRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TimeRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TimeRecords struct {
	Records []*TimeRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *TimeRecords) Reset()                    { *m = TimeRecords{} }
func (m *TimeRecords) String() string            { return proto.CompactTextString(m) }
func (*TimeRecords) ProtoMessage()               {}
func (*TimeRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TimeRecords) GetRecords() []*TimeRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type DeleteRecordRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRecordRequest) Reset()                    { *m = DeleteRecordRequest{} }
func (m *DeleteRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRecordRequest) ProtoMessage()               {}
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteRecordRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AllRecordsRequest struct {
}

func (m *AllRecordsRequest) Reset()                    { *m = AllRecordsRequest{} }
func (m *AllRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllRecordsRequest) ProtoMessage()               {}
func (*AllRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*TimeRecord)(nil), "api.TimeRecord")
	proto.RegisterType((*TimeRecords)(nil), "api.TimeRecords")
	proto.RegisterType((*DeleteRecordRequest)(nil), "api.DeleteRecordRequest")
	proto.RegisterType((*AllRecordsRequest)(nil), "api.AllRecordsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeTracking service

type TimeTrackingClient interface {
	CreateRecord(ctx context.Context, in *TimeRecord, opts ...grpc.CallOption) (*TimeRecord, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*TimeRecord, error)
	AllRecords(ctx context.Context, in *AllRecordsRequest, opts ...grpc.CallOption) (*TimeRecords, error)
}

type timeTrackingClient struct {
	cc *grpc.ClientConn
}

func NewTimeTrackingClient(cc *grpc.ClientConn) TimeTrackingClient {
	return &timeTrackingClient{cc}
}

func (c *timeTrackingClient) CreateRecord(ctx context.Context, in *TimeRecord, opts ...grpc.CallOption) (*TimeRecord, error) {
	out := new(TimeRecord)
	err := grpc.Invoke(ctx, "/api.TimeTracking/CreateRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTrackingClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*TimeRecord, error) {
	out := new(TimeRecord)
	err := grpc.Invoke(ctx, "/api.TimeTracking/DeleteRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTrackingClient) AllRecords(ctx context.Context, in *AllRecordsRequest, opts ...grpc.CallOption) (*TimeRecords, error) {
	out := new(TimeRecords)
	err := grpc.Invoke(ctx, "/api.TimeTracking/AllRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeTracking service

type TimeTrackingServer interface {
	CreateRecord(context.Context, *TimeRecord) (*TimeRecord, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*TimeRecord, error)
	AllRecords(context.Context, *AllRecordsRequest) (*TimeRecords, error)
}

func RegisterTimeTrackingServer(s *grpc.Server, srv TimeTrackingServer) {
	s.RegisterService(&_TimeTracking_serviceDesc, srv)
}

func _TimeTracking_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeTracking/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServer).CreateRecord(ctx, req.(*TimeRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTracking_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeTracking/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTracking_AllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServer).AllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TimeTracking/AllRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServer).AllRecords(ctx, req.(*AllRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeTracking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TimeTracking",
	HandlerType: (*TimeTrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _TimeTracking_CreateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _TimeTracking_DeleteRecord_Handler,
		},
		{
			MethodName: "AllRecords",
			Handler:    _TimeTracking_AllRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0xd9, 0x44, 0x2b, 0x99, 0x04, 0x7f, 0xa6, 0x50, 0x96, 0xe2, 0x45, 0x08, 0x08, 0xf1,
	0xa6, 0x48, 0x05, 0xd1, 0x4b, 0xd1, 0x27, 0x58, 0xfa, 0x02, 0x6b, 0x32, 0xc8, 0x60, 0x92, 0x5d,
	0x77, 0xb7, 0x4f, 0xe6, 0x0b, 0x4a, 0x63, 0x42, 0x4a, 0xea, 0x5d, 0x72, 0xce, 0x99, 0x73, 0x3e,
	0x58, 0x48, 0xb4, 0xe5, 0x8d, 0x75, 0x26, 0x18, 0x8c, 0xb5, 0xe5, 0x22, 0x00, 0xec, 0xb8, 0x25,
	0x45, 0x95, 0x71, 0x35, 0x5e, 0x42, 0xc4, 0xb5, 0x14, 0xb9, 0x28, 0x13, 0x15, 0x71, 0x8d, 0x2b,
	0x58, 0xe8, 0xd6, 0xec, 0xbb, 0x20, 0xa3, 0x5c, 0x94, 0xe7, 0x6a, 0xf8, 0xc3, 0x5b, 0x48, 0x02,
	0xb7, 0xe4, 0x83, 0x6e, 0xad, 0x8c, 0x73, 0x51, 0xc6, 0x6a, 0x12, 0x30, 0x87, 0xb4, 0x26, 0x5f,
	0x39, 0xb6, 0x81, 0x4d, 0x27, 0xcf, 0xfa, 0xba, 0x63, 0xa9, 0x78, 0x86, 0x74, 0x5a, 0xf5, 0x78,
	0x0f, 0x17, 0xee, 0xef, 0x53, 0x8a, 0x3c, 0x2e, 0xd3, 0xed, 0xd5, 0xe6, 0x80, 0x39, 0x45, 0xd4,
	0xe8, 0x17, 0x77, 0xb0, 0x7c, 0xa7, 0x86, 0xc2, 0x68, 0xd0, 0xf7, 0x9e, 0x7c, 0x98, 0x83, 0x17,
	0x4b, 0xb8, 0x79, 0x6d, 0x9a, 0xa1, 0x7f, 0x08, 0x6d, 0x7f, 0x04, 0x64, 0x87, 0xce, 0x9d, 0xd3,
	0xd5, 0x17, 0x77, 0x9f, 0xf8, 0x00, 0xd9, 0x9b, 0x23, 0x3d, 0x96, 0xe1, 0x7c, 0x76, 0x3d, 0x17,
	0xf0, 0x05, 0xb2, 0xe3, 0x79, 0x94, 0x7d, 0xe0, 0x1f, 0xa2, 0xd3, 0xd3, 0x27, 0x80, 0x09, 0x09,
	0x57, 0xbd, 0x7d, 0xc2, 0xb8, 0xbe, 0x9e, 0x9d, 0xf9, 0x8f, 0x45, 0xff, 0x5a, 0x8f, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x56, 0xdd, 0x9f, 0xdf, 0xba, 0x01, 0x00, 0x00,
}
